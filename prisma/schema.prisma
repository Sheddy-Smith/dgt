// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  mobile       String   @unique
  name         String?
  email        String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  listings     Listing[]
  wallet       Wallet?
  transactions Transaction[]
  
  @@map("users")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  tokens    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("wallets")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  walletId    String
  type        String   // 'purchase', 'spend', 'refund'
  amount      Int      // number of tokens
  description String?
  metadata    String?  // JSON metadata
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model Listing {
  id            String    @id @default(cuid())
  title         String
  description   String?
  price         Int
  category      String
  location      String
  city          String
  images        String?   // JSON array of image URLs
  contactNumber String
  sellerName    String
  sellerType    String    @default("individual") // 'individual' or 'dealer'
  status        String    @default("active") // 'active', 'expired', 'sold', 'removed'
  isVerified    Boolean   @default(false)
  verifiedAt    DateTime?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  unlocks       Unlock[]
  
  @@map("listings")
}

model Unlock {
  id         String   @id @default(cuid())
  listingId  String
  userId     String
  tokensUsed Int      @default(1)
  createdAt  DateTime @default(now())
  
  // Relations
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@unique([listingId, userId])
  @@map("unlocks")
}

model TokenBundle {
  id          String   @id @default(cuid())
  name        String
  price       Int      // in rupees
  tokens      Int      // base tokens
  freeTokens  Int      @default(0) // bonus tokens
  totalTokens Int      // tokens + freeTokens
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("token_bundles")
}